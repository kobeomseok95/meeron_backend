name: Java CI with Gradle

on:
  push:
    branches: [ dev, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set Application Deploy Environment variables
        run: |
          if [ ${GITHUB_REF##*/} == "main" ]; then
            echo "APP_PROFILE_NAME=prod" >> $GITHUB_ENV
            echo "APP_ENV_NAME=meeron-prod" >> $GITHUB_ENV
          else
            echo "APP_PROFILE_NAME=dev" >> $GITHUB_ENV
            echo "APP_ENV_NAME=meeron-dev" >> $GITHUB_ENV
          fi

      - name: Build With Gradle
        run: ./gradlew clean build -Pjasypt.encryptor.password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

      - name: Configure AWS Elastic Beanstalk Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ELASTIC_BEANSTALK_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ELASTIC_BEANSTALK_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.APP_ENV_NAME }}
          IMAGE_TAG: latest
          PROFILE: ${{ env.APP_PROFILE_NAME }}
        run: |
          docker build --build-arg JASPYT_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }} --build-arg PROFILE=$PROFILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp -r .ebextensions deploy/.ebextensions
          cp -r .platform deploy/.platform
          cp Dockerrun.aws.json deploy/Dockerrun.aws.json
          cd deploy && zip -r deploy.zip .

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ELASTIC_BEANSTALK_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_ELASTIC_BEANSTALK_SECRET_KEY }}
          application_name: meeron
          environment_name: ${{ env.APP_ENV_NAME }}
          version_label: ${{ env.APP_ENV_NAME }}-${{steps.current-time.outputs.formattedTime}}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 180

      - name: build result to slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{job.status}}
          fields: all
          author_name: 'meeron CI / CD'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
